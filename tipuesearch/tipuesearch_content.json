{"pages":[{"title":"YesAuthority","text":"YesAuthority YesAuthority is an authorization system for AnguLara that focuses more on the concept of activities and resources rather than roles, ids. Using different user roles, ids is still completely possible and often needed, but rather than determining functionality based on roles, ids throughout your app, Authority allows you to simply check if a user is allowed to perform an action on a given resource or activity. Before we can use YesAuthority, we need to understand how it works. In order to understand how it works, we have to be aware of some concepts. Dependencies - laravel php framework is major dependency of YesAuthority, because its use many of functions and tools of laravel and basically YesAuthority is based on route of laravel. All over working of authority is route name, without using route name you cannot use YesAuthority. The library contain some files are: config\/yes-authority.php YesAuthority\/YesAuthority.php YesAuthority\/YesAuthorityFacade.php YesAuthority\/YesAuhorityServiceProvider.php Middleware\/AuthorityCheckpostMiddleware.php In __yes-authority.php defined ability for user manually based on user ids, roles, user-model and role-model etc. There is levels of authority maintained. AuthorityCheckpostMiddleware.php is a middleware or you can say that it is a gateway of application. The work of this middleware is if user is unauthorized then redirect that user on specific URL. web.php is a route file of laravel, where all the application level route are defined. You have to add your AuthorityCheckpostMiddleware here. When to use YesAuthority As a discussed elsewhere, if your application have multiple user roles and you have to give a role basis permissions then you can use authority. YesAuthority is very flexible, helpers, facade, and blade directive are available for use anywhere in your application. YesAuthority give you power of accessibility of application.","tags":"","url":"index.html"},{"title":"Sample Structure","text":"Sample Structure of __yes-authority.php file &lt;? php return [ \/\/ authority configurations 'config' =&gt; [ \/\/ 1st Level of Permission 'col_user_id' =&gt; '_id', \/\/ User primary key column (required) 'col_role' =&gt; 'role', \/\/ Role column of user (required) 'col_user_permissions' =&gt; 'permissions_json', \/\/ Permission Column of User 'user_model' =&gt; 'Path to your User model', 'role_model' =&gt; 'Path to your Role model' ], 'rules' =&gt; [ 'roles' =&gt; [ \/\/ 3rd Level of Permission 1 =&gt; [ \/\/ This array contains the permissions which user role is 1. 'allow' =&gt; ['*'], \/\/ Allowed permission to user role is 1. Priority is less than deny. 'deny' =&gt; [], \/\/ Deny permission to user role is 1. Priority is higher than allow. ], 2 =&gt; [ \/\/ This array contains the permissions which user role is 2. 'allow' =&gt; ['*'], 'deny' =&gt; ['manage. *'], ] ], 'users' =&gt; [ \/\/ 2nd Level of Permissions. 1 =&gt; [ \/\/ id of user 1 permissions 'allow' =&gt; [], \/\/ Allowed permission to id of user 1. Priority is less than deny. 'deny' =&gt; [], \/\/ Deny permission to id of 1. Priority is higher then allow. ], 2 =&gt; [ \/\/ id of user 2 permissions. 'allow' =&gt; [], 'deny' =&gt; [], ] ], \/\/ dynamic permissions based on conditions 'conditions' =&gt; [ \/\/ 5th level of Permission [ 'access_ids' =&gt; ['access_key'], \/\/ Add your access key here. 'condition' =&gt; function( \/\/ Callback function $accessId, \/\/ Which access id you want to allow, add here. $isAccess, \/\/ According to levels current access condition. (in boolean). $currentRouteAccessId \/\/ current route id ($accessId is check with this id, if passes then follow the condition) ) { \/\/ Your logic here } ] ] ], \/\/ dependent access id relationships 'dependents' =&gt; [ \/\/ dependents route add here for permission 'foo_bar.list' =&gt; [ depend on below access. 'foo_bar.add, \/\/ dependency of 'foo_bar.list' access. 'foo_bar.edit' ] ], \/\/ Dynamic access zones 'dynamic_access_zones' =&gt; [ 'zone_name' =&gt; [ \/\/ Add your zone name here 'title' =&gt; 'title or heading of zone', 'access_ids' =&gt; [ \/\/ Add multiple access ids here 'access_id_name' (if required use asteric(*)) ], 'dependencies' =&gt; [ \/\/ dependencies of zone 'dependent_access_id_name' (if required use asteric(*)) ], ], ], ];","tags":"","url":"Sample_Structure.html"},{"title":"Config","text":"In a previous page you can see the structure of YesAuthority and all defined ability of user. Now under the structure you can see some keys, so the detail information about that keys is follow. Config Rules Roles Users Conditions Dynamic Access Zones Config This is 1st level of Access. Here all the configuration level manipulation will be done, like user_id, user_role etc. col_user_id : DB column name of primary key. col_role : DB column name of role. col_user_permissions : DB column name of __permission. user_model : Path to your User model. role_model : Path to your Role model. Rules A Rule is a way to allow or deny a User to perform an Action on a Resource. Some key point included in rule explain in details below. Allow The allow applies a Rule to a user, that allows the user to perform an action on a Resource. The allow access ids under it. Ex. 'allow' =&gt; ['*']. The * is the access ids. Low priority as compare to deny. Deny The deny applies a Rule to a user, that deny the user to perform an action on a Resource. The deny access ids under it. Ex. 'deny' =&gt; ['user.delete']. The \u00e2\u0080\u0098user.delete\u00e2\u0080\u0099 is the access ids but this is not allow to user to delete it. High priority as compare to allow. Roles A user role basis permission handle here. This is a 3rd level of access. You can add your route name or zones in allow and deny array. This will check if logged in user role and then it will allow or deny action on resource basis of permission. Users A Users array is a basis on a id of a user, here you can define multiple nested level array as per user id. This is 2nd level of access, here also you can add your route name in allow or deny array as per your requirement. When a user is logged in then it will allow or deny action on resource basis of permission which is write here. Conditions Conditions Check the dynamic conditions. If you have some specific situation which is not handle by above array then you can write your logic here. It is a 5th level of access. This logic will be perform on access_ids and your 'condition'. Here you can add a callback function and write some logic here. access_ids - Define the access ids. condition \u00e2\u0080\u0093 Write here your logic for dynamic conditions, It\u00e2\u0080\u0099s a callback function. Dynamic Access Zones you can create your multiple route ids and its dependencies in one zone. eg. if you have user component and user component have multiple actions like list, add, edit, delete and all actions have routes and then you have to write those route ids in above array multiple times, to avoid repetitiveness in a code you can create zones of multiple ids and add these zones in your required place. 'dynamic_access_zones' : It is a array of multiple zones. In above array define a zone in that give a zone title and \u00e2\u0080\u0098access_ids\u00e2\u0080\u0099. 'access_ids' : It\u00e2\u0080\u0099s a array of multiple route ids (name). You can also use asteric (). Example - \u00e2\u0080\u0098account.test.write.\u00e2\u0080\u0099. In this example If you access above zone then it will check if logged in user have permission to access all the access ids define in this zone. 'dependencies' : This is a array for defining dependencies of above access ids. For example \u00e2\u0080\u0093 account.test.write.* this route dependency is account.test.list. If user have permission to add account then user automatically have permission for view a list. So this is a way of defining ability of user (permissions) static &amp; dynamic permission. The ability define base of roles, user id, also define dynamically using permissions_json column we need to define column in users table in DB &amp; save zone id for that user. In a zone multiple route id can define and its dependencies are defined.","tags":"","url":"Config.html"},{"title":"Usage","text":"Now your all the accessibility is set and now you can use YesAuthority in your project for show, hide buttons or any element in html or get a role or user level permissions or create dynamic access permissions. To do all these things YesAuthority provide you a facade, helpers for instant access. Facade Before started you have to add use YesAuthority on the top of the your application and then use facade method. Following some facade method are available in YesAuthority. before use facade please go through following array of level. \/*[ 'CONFIG_ROLE' =&gt; 1, \/\/ Config Role 'CONFIG_USER' =&gt; 2, \/\/ Config User 'DB_ROLE' =&gt; 3, \/\/ DB Role 'DB_USER' =&gt; 4, \/\/ DB User 'CONDITIONS' =&gt; 5, \/\/ Conditions ]*\/ availableRoutes availableRoutes method return array of allowed \/ public routes, it take 3 parameters which is explain below. isUriRequired - default this parameter is false, if you required uri along with route names then pass a first parameter as true. requestForUserId - default is logged in user id, if you pass other than logged in user id then it will return array of that user allow \/ public route. options - default is null, if you want to get a array of route from specific level then pass the first check_level key to this array and it will return array of allowed \/ public routes, if you pass access_details =&gt; true as second key then it will return array along with full detail of that route ids. YesAuthority::availableRoutes(false, null, ['check_level' =&gt; 'CONDITIONS', 'access_details' =&gt; true]); \/*[ 0 =&gt; &quot;is_access&quot; =&gt; true &quot;result_by&quot; =&gt; null &quot;levels_checked&quot; =&gt; [] &quot;access_id_key&quot; =&gt; &quot;your_access_id_key&quot; &quot;title&quot; =&gt; null &quot;is_public&quot; =&gt; true &quot;is_zone&quot; =&gt; false &quot;uri&quot; =&gt; &quot;your_route_uri&quot;, 1 =&gt; array:8[&gt;] 2 =&gt; array:8[&gt;] . . ]*\/ availableZones availableZones method return array of allowed \/ public zones, it take 2 parameters which is $requestForUserId, $options used as per availableRoutes parameters. YesAuthority::availableZones(false, null, ['check_level' =&gt; 'CONDITIONS', 'access_details' =&gt; true]); \/*[ 0 =&gt; &quot;is_access&quot; =&gt; true &quot;result_by&quot; =&gt; null &quot;levels_checked&quot; =&gt; [] &quot;access_id_key&quot; =&gt; &quot;your_access_id_key&quot; &quot;title&quot; =&gt; null &quot;is_public&quot; =&gt; true &quot;is_zone&quot; =&gt; true \/\/ only value change here &quot;uri&quot; =&gt; &quot;your_route_uri&quot;, 1 =&gt; array:8[&gt;] 2 =&gt; array:8[&gt;] . . ]*\/ isPublicAccess isPublicAccess is used for to check if given route id have public access or not. If it return true then route id have public access otherwise not. Its take 2 parameter which is explain below. routeName - it is not required, if route name is not given then it will take current route id. requestForUserId - it is not required, if this is given then its check route id for given user id. YesAuthority::isPublicAccess('home', 1); \/\/ true Methods In this server-side and client-side helpers are included which is used anywhere in the application. This methods are very useful for use YesAuthority. __canAccess __canAccess is serverside and clientside function for check if given route have access or not. __canAccess('home'); \/\/ true __canPublicAccess __canPublicAccess is serverside function for check if given route have public access or not. __canPublicAccess('public.app'); \/\/ true","tags":"","url":"Usage.html"}]}