{"pages":[{"title":"YesAuthority","text":"YesAuthority YesAuthority is flexible authorization system for Laravel, It checks the route permission to access a certain portion of the site or application. To add Permissions User-based, Role-based, Conditionally. It uses authority.checkpost middleware for filter permission of current accessing route, Under this middleware checked every permission of the user login. Installation Require this package in your composer.json or install it by running: composer require livelyworks\/laravel-yes-authority Now, insert into your config\/app.php. &quot;provider&quot; =&gt; [ LivelyWorks\\YesAuthority\\YesAuthorityServiceProvider::class ]; Now, run this command after that config\/yes-authority.php and app\/Http\/Middleware\/YesAuthorityCheckpostMiddleware.php files are publish. php artisan vendor:publish --tag=&quot;yesauthority&quot; Now, insert into your app\/Http\/Kernel.php. protected $routeMiddleware = [ 'authority.checkpost' =&gt; \\App\\Http\\Middleware\\YesAuthorityCheckpostMiddleware::class ]; Use authority.checkpost middleware for handle permission base routes. Route::group(['middleware' =&gt; 'authority.checkpost'], function () { \/\/ Place all those routes here which needs authentication and authorization. }); Now, the basic setup is ready you need to configure rules of permissions using config\/yes-authority. Configuration The structure of permissions given below, but it's highly recommended to read more on docs`. [ 'allow' =&gt; ['*'], \/\/ Allowed permission to user. Priority is less than deny. 'deny' =&gt; ['temp1'], \/\/ Deny permission to user. Priority is higher than allow. ] canAccess('temp1'); \/\/ false Usage - Helpers canAccess($accessId = null); Check the access, By default it check current route and return response in boolean value. canAccess('temp1'); \/\/ true or false canPublicAccess($accessId = null); - Authentication not required Check the public access, By default it check current route and return response in boolean value. canPublicAccess(); \/\/ true or false Usage - Facade YesAuthority::check($accessId = null, $requestForUserId = null) Check the access of $accessId, By default it check current route and return response in boolean value, And it can check access of perticular user by passing user id ($requestForUserId) parameter. YesAuthority::check('temp1'); \/\/ true or false YesAuthority::isPublicAccess($accessId = null); - Authentication not required Check the access of $accessId, By default it check current route and return response in boolean value. YesAuthority::isPublicAccess('temp1'); \/\/ true or false Usage - Directives @canAccess($accessId = null); Check the access, By default it check current route and return response in boolean value. @canAccess() \/\/ your logic here. @endAccess; @canPublicAccess($accessId = null); - Authentication not required Check the public access, By default it check current route and return response in boolean value. @canPublicAccess() \/\/ your logic here. @endAccess;","tags":"","url":"index.html"},{"title":"Sample Structure","text":"Sample Structure of __yes-authority.php file &lt;? php return [ \/\/ authority configurations 'config' =&gt; [ \/\/ 1st Level of Permission 'col_user_id' =&gt; '_id', \/\/ User primary key column (required) 'col_role' =&gt; 'role', \/\/ Role column of user (required) 'col_user_permissions' =&gt; 'permissions_json', \/\/ Permission Column of User 'user_model' =&gt; 'Path to your User model', 'role_model' =&gt; 'Path to your Role model' ], 'rules' =&gt; [ 'roles' =&gt; [ \/\/ 3rd Level of Permission 1 =&gt; [ \/\/ This array contains the permissions which user role is 1. 'allow' =&gt; ['*'], \/\/ Allowed permission to user role is 1. Priority is less than deny. 'deny' =&gt; [], \/\/ Deny permission to user role is 1. Priority is higher than allow. ], 2 =&gt; [ \/\/ This array contains the permissions which user role is 2. 'allow' =&gt; ['*'], 'deny' =&gt; ['manage. *'], ] ], 'users' =&gt; [ \/\/ 2nd Level of Permissions. 1 =&gt; [ \/\/ id of user 1 permissions 'allow' =&gt; [], \/\/ Allowed permission to id of user 1. Priority is less than deny. 'deny' =&gt; [], \/\/ Deny permission to id of 1. Priority is higher then allow. ], 2 =&gt; [ \/\/ id of user 2 permissions. 'allow' =&gt; [], 'deny' =&gt; [], ] ], \/\/ dynamic permissions based on conditions 'conditions' =&gt; [ \/\/ 5th level of Permission [ 'access_ids' =&gt; ['access_key'], \/\/ Add your access key here. 'condition' =&gt; function( \/\/ Callback function $accessId, \/\/ Which access id you want to allow, add here. $isAccess, \/\/ According to levels current access condition. (in boolean). $currentRouteAccessId \/\/ current route id ($accessId is check with this id, if passes then follow the condition) ) { \/\/ Your logic here } ] ] ], \/\/ dependent access id relationships 'dependents' =&gt; [ \/\/ dependents route add here for permission 'foo_bar.list' =&gt; [ depend on below access. 'foo_bar.add, \/\/ dependency of 'foo_bar.list' access. 'foo_bar.edit' ] ], \/\/ Dynamic access zones 'dynamic_access_zones' =&gt; [ 'zone_name' =&gt; [ \/\/ Add your zone name here 'title' =&gt; 'title or heading of zone', 'access_ids' =&gt; [ \/\/ Add multiple access ids here 'access_id_name' (if required use asteric(*)) ], 'dependencies' =&gt; [ \/\/ dependencies of zone 'dependent_access_id_name' (if required use asteric(*)) ], ], ], ];","tags":"","url":"Sample_Structure.html"},{"title":"Config","text":"In a previous page you can see the structure of YesAuthority and all defined ability of user. Now under the structure you can see some keys, so the detail information about that keys is follow. Config Rules Roles Users Conditions Dynamic Access Zones Config This is 1st level of Access. Here all the configuration level manipulation will be done, like user_id, user_role etc. col_user_id : DB column name of primary key. col_role : DB column name of role. col_user_permissions : DB column name of __permission. user_model : Path to your User model. role_model : Path to your Role model. Rules A Rule is a way to allow or deny a User to perform an Action on a Resource. Some key point included in rule explain in details below. Allow The allow applies a Rule to a user, that allows the user to perform an action on a Resource. The allow access ids under it. Ex. 'allow' =&gt; ['*']. The * is the access ids. Low priority as compare to deny. Deny The deny applies a Rule to a user, that deny the user to perform an action on a Resource. The deny access ids under it. Ex. 'deny' =&gt; ['user.delete']. The \u00e2\u0080\u0098user.delete\u00e2\u0080\u0099 is the access ids but this is not allow to user to delete it. High priority as compare to allow. Roles A user role basis permission handle here. This is a 3rd level of access. You can add your route name or zones in allow and deny array. This will check if logged in user role and then it will allow or deny action on resource basis of permission. Users A Users array is a basis on a id of a user, here you can define multiple nested level array as per user id. This is 2nd level of access, here also you can add your route name in allow or deny array as per your requirement. When a user is logged in then it will allow or deny action on resource basis of permission which is write here. Conditions Conditions Check the dynamic conditions. If you have some specific situation which is not handle by above array then you can write your logic here. It is a 5th level of access. This logic will be perform on access_ids and your 'condition'. Here you can add a callback function and write some logic here. access_ids - Define the access ids. condition \u00e2\u0080\u0093 Write here your logic for dynamic conditions, It\u00e2\u0080\u0099s a callback function. Dynamic Access Zones you can create your multiple route ids and its dependencies in one zone. eg. if you have user component and user component have multiple actions like list, add, edit, delete and all actions have routes and then you have to write those route ids in above array multiple times, to avoid repetitiveness in a code you can create zones of multiple ids and add these zones in your required place. 'dynamic_access_zones' : It is a array of multiple zones. In above array define a zone in that give a zone title and \u00e2\u0080\u0098access_ids\u00e2\u0080\u0099. 'access_ids' : It\u00e2\u0080\u0099s a array of multiple route ids (name). You can also use asteric (). Example - \u00e2\u0080\u0098account.test.write.\u00e2\u0080\u0099. In this example If you access above zone then it will check if logged in user have permission to access all the access ids define in this zone. 'dependencies' : This is a array for defining dependencies of above access ids. For example \u00e2\u0080\u0093 account.test.write.* this route dependency is account.test.list. If user have permission to add account then user automatically have permission for view a list. So this is a way of defining ability of user (permissions) static &amp; dynamic permission. The ability define base of roles, user id, also define dynamically using permissions_json column we need to define column in users table in DB &amp; save zone id for that user. In a zone multiple route id can define and its dependencies are defined.","tags":"","url":"Config.html"},{"title":"Usage","text":"Now your all the accessibility is set and now you can use YesAuthority in your project for show, hide buttons or any element in html or get a role or user level permissions or create dynamic access permissions. To do all these things YesAuthority provide you a facade, helpers for instant access. Facade Before started If you added the alias to config\/app.php then you can access YesAuthority from any Controller, anywhere else in your laravel application. Following some facade method are available in YesAuthority. before use facade method please go through following permission levels. \/*[ 'CONFIG_ROLE' =&gt; 1, \/\/ Config Role 'CONFIG_USER' =&gt; 2, \/\/ Config User 'DB_ROLE' =&gt; 3, \/\/ DB Role 'DB_USER' =&gt; 4, \/\/ DB User 'CONDITIONS' =&gt; 5, \/\/ Conditions ]*\/ availableRoutes availableRoutes method used to return array of allowed and public routes and its require two argument. isUriRequired - default this argument set to false, if you required uri along with route names then pass a first argument as true. requestForUserId - default is logged in user id, if you pass other than logged in user id then it will return array of that user allow \/ public route. YesAuthority::availableRoutes(false, null); getRoutes This method returns array of all routes. You may also pass arguments as per availableRoutes. YesAuthority::getRoutes(false, null); If you wish to return only allowed, denied or public route then add chaining method to getRoutes. \/\/ For Allowed YesAuthority::takeAllowed()-&gt;getRoutes(); \/\/ For Denied YesAuthority::takeDenied()-&gt;getRoutes(); \/\/ For Public YesAuthority::takePublic()-&gt;getRoutes(); If you wish to get routes according to levels. \/\/ Get some levels, you can use array also for multiple levels YesAuthority::checkOnly('CONFIG_ROLE')-&gt;getRoutes(); \/\/ Get Except, you can use array also for multiple levels YesAuthority::checkExcept('CONFIG_ROLE')-&gt;getRoutes(); \/\/ Get up to levels, you can use array also for multiple levels YesAuthority::checkUpto('CONFIG_ROLE')-&gt;getRoutes(); If you wish to get routes according to role_id then use viaRole YesAuthority::checkOnly(['CONFIG_ROLE', 'DB_ROLE'])-&gt;viaRole()-&gt;getRoutes(false, roleId); availableZones availableZones method used to return array of allowed and public zones. You can also pass userId as argument for get zones of particular user other than logged in user. YesAuthority::availableZones(false, null); getZones This method returns array of all zones. You may also pass arguments as per availableRoutes. YesAuthority::getZones(false, null); If you wish to return only allowed, denied or public route then add chaining method to getZones. \/\/ For Allowed YesAuthority::takeAllowed()-&gt;getZones(); \/\/ For Denied YesAuthority::takeDenied()-&gt;getZones(); \/\/ For Public YesAuthority::takePublic()-&gt;getZones(); If you wish to get zones according to levels. \/\/ Get some levels, you can use array also for multiple levels YesAuthority::checkOnly('CONFIG_ROLE')-&gt;getZones(); \/\/ Get Except, you can use array also for multiple levels YesAuthority::checkExcept('CONFIG_ROLE')-&gt;getZones(); \/\/ Get up to levels, you can use array also for multiple levels YesAuthority::checkUpto('CONFIG_ROLE')-&gt;getZones(); If you wish to get zones according to role_id then use viaRole YesAuthority::checkOnly([your_level_here])-&gt;viaRole()-&gt;getZones(false, roleId); Its all output is in collection objects as following \/*[ 0 =&gt; YesAuthorityResult {#208 \u00e2\u0096\u00bc #originalResult: array:12 [\u00e2\u0096\u00bc &quot;response_code&quot; =&gt; 200 &quot;message&quot; =&gt; &quot;OK&quot; &quot;is_access&quot; =&gt; true &quot;result_by&quot; =&gt; &quot;CONFIG_USER&quot; &quot;upper_level&quot; =&gt; &quot;CONFIG_ROLE&quot; &quot;condition_result_by&quot; =&gt; null &quot;conditions_checked&quot; =&gt; null &quot;levels_checked&quot; =&gt; array:2 [\u00e2\u0096\u00b6] &quot;access_id_key&quot; =&gt; &quot;demo.1&quot; &quot;title&quot; =&gt; null &quot;is_public&quot; =&gt; false &quot;is_zone&quot; =&gt; false ] #options: array:1 [\u00e2\u0096\u00b6] #checkLevels: array:5 [\u00e2\u0096\u00b6] +&quot;uri&quot;: &quot;demo-1&quot; } 1 =&gt; YesAuthorityResult {#198 \u00e2\u0096\u00b6} 2 =&gt; YesAuthorityResult {#209 \u00e2\u0096\u00b6} . . ]*\/ isPublicAccess isPublicAccess is used for to check if given route id have public access or not. If it is have public access then return true otherwise return false. Its require two argument which is explain below. routeName - it is not required, if route name is not given then it will take current route id. requestForUserId - it is not required, if this is given then its check route id for given user id. YesAuthority::isPublicAccess('home', 1); \/\/ true Methods There are 2 basic functions that you need to be aware of to utilize YesAuthority. canAccess Check if user can access a resource canAccess('home'); \/\/ true You can also use wild card string to check access a resource. canAccess('manage.*'); \/\/ true canPublicAccess Check if if given route have public access. canPublicAccess('public.app'); \/\/ true","tags":"","url":"Usage.html"}]}